'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = void 0;

function _stripAnsi() {
  const data = _interopRequireDefault(require('strip-ansi'));

  _stripAnsi = function () {
    return data;
  };

  return data;
}

var _BaseReporter = _interopRequireDefault(require('./BaseReporter'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
}

/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
const lineAndColumnInStackTrace = /^.*?:([0-9]+):([0-9]+).*$/;

function replaceEntities(s) {
  // https://github.com/actions/toolkit/blob/b4639928698a6bfe1c4bdae4b2bfdad1cb75016d/packages/core/src/command.ts#L80-L85
  const substitutions = [
    [/%/g, '%25'],
    [/\r/g, '%0D'],
    [/\n/g, '%0A']
  ];
  return substitutions.reduce((acc, sub) => acc.replace(...sub), s);
}

class GitHubActionsReporter extends _BaseReporter.default {
  static filename = __filename;

  onRunComplete(_testContexts, aggregatedResults) {
    const messages = getMessages(
      aggregatedResults === null || aggregatedResults === void 0
        ? void 0
        : aggregatedResults.testResults
    );

    for (const message of messages) {
      this.log(message);
    }
  }
}

exports.default = GitHubActionsReporter;

function getMessages(results) {
  if (!results) return [];
  return results.flatMap(({testFilePath, testResults}) =>
    testResults
      .filter(r => r.status === 'failed')
      .flatMap(r => r.failureMessages)
      .map(m => (0, _stripAnsi().default)(m))
      .map(m => replaceEntities(m))
      .map(m => lineAndColumnInStackTrace.exec(m))
      .filter(m => m !== null)
      .map(
        ([message, line, col]) =>
          `\n::error file=${testFilePath},line=${line},col=${col}::${message}`
      )
  );
}
